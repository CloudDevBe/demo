#!/bin/bash

# Credits: taken and fixed from
# http://stackoverflow.com/questions/38120916/kubernetes-flexvolume-plugin-for-cifs

#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	 http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

JQ="/usr/bin/jq"

usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 mount <mount dir> <mount device> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
	echo $* 1>&2
}

log() {
	echo $* >&1
}

ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	[ "${MOUNT}" == "${MNTPATH}" ]
}

mount() {
	MNTPATH="$1"
	VOLUME_SRC=$(echo "$2"|"$JQ" -r '.source')
	ACCOUNTNAME=$(echo "$2"|"$JQ" -r '.["kubernetes.io/secret/accountname"] // empty'|base64 -d)
	ACCOUNTKEY=$(echo "$2"|"$JQ" -r '.["kubernetes.io/secret/accountkey"] // empty'|base64 -d)
	#READ_MODE=$(echo "$2"|"$JQ" -r '.["kubernetes.io/readwrite"]')
	#MOUNT_OPTIONS=$(echo "$2"|"$JQ" -r '.mountOptions // empty')
		
	if ismounted ; then
		log '{"status": "Success"}'
		exit 0
	fi

	mkdir -p ${MNTPATH} &> /dev/null

	result=`/bin/dyskctl mount auto-create -a "${ACCOUNTNAME}" -k "${ACCOUNTKEY}" 2>/dev/null`
	diskname=`echo $result | "jq" -r '.Name'`
	if [ ${#diskname} -gt 4 ]; then
		#echo /dev/$diskname
		mkfs.ext4 /dev/$diskname
	fi
	/bin/mount "${VOLUME_SRC}" "${MNTPATH}" > /dev/null

	if [ $? -ne 0 ]; then
		err '{ "status": "Failure", "message": "Failed to mount device '${DMDEV}' at '${MNTPATH}' , user: '${USERNAME}' , '${VOLUME_SRC}'"}'
		exit 1
	fi
	log '{"status": "Success"}'
	exit 0
}

unmount() {
	MNTPATH="$1"
	if ! ismounted ; then
		log '{"status": "Success"}'
		exit 0
	fi
	
	#TODO: need to find the disk name and run dyskctl unmount -d diskname
	umount "${MNTPATH}" &> /dev/null
	if [ $? -ne 0 ]; then
		err '{ "status": "Failed", "message": "Failed to unmount volume at '${MNTPATH}'"}'
		exit 1
	fi
	rmdir "${MNTPATH}" &> /dev/null

	log '{"status": "Success"}'
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	log '{"status": "Success", "capabilities": {"attach": false}}'
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	mount)
		mount $*
		;;			
	unmount)
		unmount $*
		;;
	*)
	usage
esac

exit 1


